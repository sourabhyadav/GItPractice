1st file

commands:

// One time activity
git --version			-> prints the version of your git
git config user.name "<author name>" 	-> adds the user name for the given git repo
git config user.email "<email id>" -> adds user email fot the given git repo
git init 			-> initilize the empty repo of as git repo to track changes

// Basic git utils
git log				-> prints all the commit to the repo
git log --author "<author name>"	-> prints all the commit to the repo from a specific user only
git status 			-> 


// Add a file to git repo and commut them
git add . 			-> adds the all the new files inside the git repo
git commit -m "your message" 	-> commit your changes


// View the chages that you made
git diff 			-> shows the diff between the working file (the file which is not added yer) vs current repo file
git diff --staged 		-> shows diff between the staged copy (file which are added but not yet commited) vs current repo file

// How to delete a file 
git rm <file name>		-> it deletes the file BUT you need to commit to ask git to take the snapshot for these changes to capture

// Git rename is simialr to detele and add a new file if you do it manually. Here you have to commit manually
OR
// use git mv command
git mv <oldfilename> <newfilename? 	-> it directly does the renaming of files, later comit manually to take the snapshot

// Commiting the changes directly to the repo
git commit -am "commit message"

// Unsatging any file
git reset HEAD < staged filename> 	-> unsaging any file making it again working copy	

// Rolling out for the older version of the any file]
git checkout -- <filename> 		-> it does take the repo copy version make it as a working copy
// above command is meant for working copy to replaced with repo copy

// Rolling back to previous commited versions
git checkout <initials of commit number> -- <filename> -> this command will make the provided prev filename to your staging area . You need to review and edit it and them again commit